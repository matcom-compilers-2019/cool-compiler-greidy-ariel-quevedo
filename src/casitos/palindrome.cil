Types:
	Object{
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
	}
	Int{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Int:initialize_Int
	}
	Bool{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Bool:initialize_Bool
	}
	IO{
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
	}
	String{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method length:String_length
		method concat:String_concat
		method substr:String_substring
		method initialize_String:initialize_String
	}
	Main{
		attribute i
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method pal:Main_pal
		method main:Main_main
		method initialize_Main:initialize_Main
	}
Data:
	_vacio="vacio"
	x_56="enter a string
"
	x_63="that was a palindrome
"
	x_67="that was not a palindrome
"
Code:
	initialize_Object{
		Arg instance
	}
	initialize_Int{
		Arg instance
	}
	initialize_Bool{
		Arg instance
	}
	initialize_IO{
		Arg instance
	}
	initialize_String{
		Arg instance
	}
	Object_copy{
		Arg to_copy
		Local isvoid
		Local save_copy
		save_copy = Copy to_copy
	}
	Object_abort{
		Arg self_Object
		Local isvoid
		halt
	}
	Object_type_name{
		Arg self_Object
		Local name
		Local type_name_ref
		Local isvoid
		name = Typeof self_Object
		type_name_ref = Type_Name name
	}
	IO_out_string{
		Arg out_string
		Arg self_IO
		Local isvoid
		Print out_string
		out_string = self_IO
	}
	IO_out_int{
		Arg out_int
		Arg self_IO
		Local isvoid
		Print out_int
		out_int = self_IO
	}
	IO_in_string{
		Arg self_IO
		Local isvoid
		Local x_in_string
		x_in_string = Read
	}
	IO_in_int{
		Arg self_IO
		Local x_in_int
		Local isvoid
		x_in_int = Read
	}
	String_length{
		Arg x_str
		Local x_str_length
		Local isvoid
		x_str_length = Length x_str
	}
	String_concat{
		Arg self_String
		Arg x_str1
		Local x_str_concat
		Local isvoid
		x_str_concat = Concat x_str1 self_String
	}
	String_substring{
		Arg self_String
		Arg x_j
		Arg x_i
		Local x_sub_str
		Local isvoid
		x_sub_str = Substring self_String x_j x_i
	}
	Main_pal{
		Arg x__0
		Arg self_Main
		Local isvoid
		Local x_1
		Local x_2
		Local x_3
		Local x_4
		Local x_5
		Local x_6
		Local x_7
		Local x_8
		Local x_9
		Local x_10
		Local x_11
		Local x_12
		Local x_13
		Local x_14
		Local x_15
		Local x_16
		Local x_17
		Local x_18
		Local x_19
		Local x_20
		Local x_21
		Local x_22
		Local x_23
		Local x_24
		Local x_25
		Local x_26
		Local x_27
		Local x_28
		Local x_29
		Local x_30
		Local x_31
		Local x_32
		Local x_33
		Local x_34
		Local x_35
		Local x_36
		Local x_37
		Local x_38
		Local x_39
		Local x_40
		Local x_41
		Local x_42
		Local x_43
		Local x_44
		Local x_45
		Local x_46
		Local x_47
		Local x_48
		x_3 = Allocate String
		SetAttr x_3 0 x__0
		x_2 = Typeof x_3
		Param x_3 0
		x_1 = VCall x_2 length
		x_4 = 0
		x_5 = x_1 == x_4
		x_48 = x_5
		If x_48 Goto LABEL4
		x_6 = 1
		x_48 = x_6
		Goto LABEL5
		LABEL4:
		x_9 = Allocate String
		SetAttr x_9 0 x__0
		x_8 = Typeof x_9
		Param x_9 0
		x_7 = VCall x_8 length
		x_10 = 1
		x_11 = x_7 == x_10
		x_47 = x_11
		If x_47 Goto LABEL2
		x_12 = 1
		x_47 = x_12
		Goto LABEL3
		LABEL2:
		x_15 = Allocate String
		SetAttr x_15 0 x__0
		x_14 = Typeof x_15
		x_17 = 0
		x_16 = x_17
		x_19 = 1
		x_18 = x_19
		Param x_16 0
		Param x_18 1
		Param x_15 2
		x_13 = VCall x_14 substr
		x_22 = Allocate String
		SetAttr x_22 0 x__0
		x_21 = Typeof x_22
		x_26 = Allocate String
		SetAttr x_26 0 x__0
		x_25 = Typeof x_26
		Param x_26 0
		x_24 = VCall x_25 length
		x_27 = 1
		x_28 = x_24 - x_27
		x_23 = x_28
		x_30 = 1
		x_29 = x_30
		Param x_23 0
		Param x_29 1
		Param x_22 2
		x_20 = VCall x_21 substr
		x_31 = x_13 =String= x_20
		x_46 = x_31
		If x_46 Goto LABEL0
		x_36 = Allocate String
		SetAttr x_36 0 x__0
		x_35 = Typeof x_36
		x_38 = 1
		x_37 = x_38
		x_42 = Allocate String
		SetAttr x_42 0 x__0
		x_41 = Typeof x_42
		Param x_42 0
		x_40 = VCall x_41 length
		x_43 = 2
		x_44 = x_40 - x_43
		x_39 = x_44
		Param x_37 0
		Param x_39 1
		Param x_36 2
		x_34 = VCall x_35 substr
		x_33 = x_34
		Param x_33 0
		Param self_Main 1
		x_32 = VCall Main pal
		x_46 = x_32
		Goto LABEL1
		LABEL0:
		x_45 = 0
		x_46 = x_45
		LABEL1:
		x_47 = x_46
		LABEL3:
		x_48 = x_47
		LABEL5:
	}
	Main_main{
		Arg self_Main
		Local isvoid
		Local x_50
		Local x_52
		Local x_51
		Local x_53
		Local x_54
		Local x_55
		Local x_57
		Local x_58
		Local x_59
		Local x_60
		Local x_61
		Local x_62
		Local x_64
		Local x_65
		Local x_66
		Local x_68
		Local x_69
		x_50 = 1
		x_52 = 0
		x_51 = x_52 - x_50
		SetAttr self_Main 0 x_51
		x_53 = GetAttr self_Main 0
		x_57 = Load x_56 -> enter a string

		x_55 = x_57
		Param x_55 0
		Param self_Main 1
		x_54 = VCall Main out_string
		Param self_Main 0
		x_60 = VCall Main in_string
		x_59 = x_60
		Param x_59 0
		Param self_Main 1
		x_58 = VCall Main pal
		x_69 = x_58
		If x_69 Goto LABEL6
		x_64 = Load x_63 -> that was a palindrome

		x_62 = x_64
		Param x_62 0
		Param self_Main 1
		x_61 = VCall Main out_string
		x_69 = x_61
		Goto LABEL7
		LABEL6:
		x_68 = Load x_67 -> that was not a palindrome

		x_66 = x_68
		Param x_66 0
		Param self_Main 1
		x_65 = VCall Main out_string
		x_69 = x_65
		LABEL7:
	}
	initialize_Main{
		Arg self_Main
		Local isvoid
		Local x_49
		Local return
		SetAttr self_Main 0 x_49
		return = self_Main
	}
	main{
		Local x_71
		Local x_72
		Local x_70
		x_71 = Allocate Main
		Param x_71 0
		x_70 = Call initialize_Main
		Param x_71 0
		x_72 = Call Main_main
		halt
	}
