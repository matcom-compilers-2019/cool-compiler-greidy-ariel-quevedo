Types:
	Object{
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
	}
	Int{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Int:initialize_Int
	}
	Bool{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Bool:initialize_Bool
	}
	IO{
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
	}
	String{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method length:String_length
		method concat:String_concat
		method substr:String_substring
		method initialize_String:initialize_String
	}
	Main{
		attribute out
		attribute testee
		attribute divisor
		attribute stop
		attribute m
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method main:Main_main
		method initialize_Main:initialize_Main
	}
Data:
	_vacio=""
	x_3="2 is trivially prime.
"
	x_52=" is prime.
"
	x_60="continue"
Code:
	initialize_Object{
		Arg instance
	}
	initialize_Int{
		Arg instance
	}
	initialize_Bool{
		Arg instance
	}
	initialize_IO{
		Arg instance
	}
	initialize_String{
		Arg instance
	}
	Object_copy{
		Arg to_copy
		Local isvoid
		Local save_copy
		save_copy = Copy to_copy
	}
	Object_abort{
		Arg self_Object
		Local isvoid
		halt
	}
	Object_type_name{
		Arg self_Object
		Local name
		Local type_name_ref
		Local isvoid
		name = Typeof self_Object
		type_name_ref = Type_Name name
	}
	IO_out_string{
		Arg out_string
		Arg self_IO
		Local isvoid
		Print out_string
		out_string = self_IO
	}
	IO_out_int{
		Arg out_int
		Arg self_IO
		Local isvoid
		Print out_int
		out_int = self_IO
	}
	IO_in_string{
		Arg self_IO
		Local isvoid
		Local x_in_string
		x_in_string = Read
	}
	IO_in_int{
		Arg self_IO
		Local x_in_int
		Local isvoid
		x_in_int = Read
	}
	String_length{
		Arg x_str
		Local x_str_length
		Local isvoid
		x_str_length = Length x_str
	}
	String_concat{
		Arg self_String
		Arg x_str1
		Local x_str_concat
		Local isvoid
		x_str_concat = Concat x_str1 self_String
	}
	String_substring{
		Arg self_String
		Arg x_j
		Arg x_i
		Local x_sub_str
		Local isvoid
		x_sub_str = Substring self_String x_j x_i
	}
	Main_main{
		Arg self_Main
		Local isvoid
		Local x_0
		x_0 = 0
	}
	initialize_Main{
		Arg self_Main
		Local isvoid
		Local x_1
		Local x_2
		Local x_4
		Local x_5
		Local x_6
		Local x_7
		Local x_8
		Local x_9
		Local x_10
		Local x_11
		Local x_12
		Local x_13
		Local x_14
		Local x_15
		Local x_16
		Local x_17
		Local x_18
		Local x_19
		Local x_20
		Local x_21
		Local x_22
		Local x_23
		Local x_24
		Local x_25
		Local x_26
		Local x_27
		Local x_28
		Local x_29
		Local x_30
		Local x_31
		Local x_32
		Local x_33
		Local x_34
		Local x_35
		Local x_36
		Local x_37
		Local x_38
		Local x_39
		Local x_40
		Local x_41
		Local x_42
		Local x_43
		Local x_44
		Local x_45
		Local x_46
		Local x_47
		Local x_48
		Local x_49
		Local x_50
		Local x_51
		Local x_53
		Local x_54
		Local x_55
		Local x_56
		Local x_57
		Local x_58
		Local x_59
		Local x_61
		Local x_62
		Local x_63
		Local x_64
		Local return
		x_4 = Load x_3 -> 2 is trivially prime.

		x_2 = x_4
		Param x_2 0
		Param self_Main 1
		x_1 = VCall Main out_string
		x_5 = 2
		SetAttr self_Main 0 x_5
		x_6 = GetAttr self_Main 0
		SetAttr self_Main 1 x_6
		SetAttr self_Main 2 x_7
		x_8 = 10000
		SetAttr self_Main 3 x_8
		LABEL10:
		x_9 = 1
		x_64 = x_9
		If x_64 Goto LABEL11
		x_10 = GetAttr self_Main 1
		x_11 = 1
		x_12 = x_10 + x_11
		SetAttr self_Main 1 x_12
		x_13 = GetAttr self_Main 1
		x_14 = 2
		SetAttr self_Main 2 x_14
		x_15 = GetAttr self_Main 2
		LABEL4:
		x_16 = GetAttr self_Main 1
		x_17 = GetAttr self_Main 2
		x_18 = GetAttr self_Main 2
		x_19 = x_17 * x_18
		x_20 = x_16 < x_19
		x_34 = x_20
		If x_34 Goto LABEL2
		x_21 = 0
		x_34 = x_21
		Goto LABEL3
		LABEL2:
		x_22 = GetAttr self_Main 1
		x_23 = GetAttr self_Main 2
		x_24 = GetAttr self_Main 1
		x_25 = GetAttr self_Main 2
		x_26 = x_24 / x_25
		x_27 = x_23 * x_26
		x_28 = x_22 - x_27
		x_29 = 0
		x_30 = x_28 == x_29
		x_33 = x_30
		If x_33 Goto LABEL0
		x_31 = 0
		x_33 = x_31
		Goto LABEL1
		LABEL0:
		x_32 = 1
		x_33 = x_32
		LABEL1:
		x_34 = x_33
		LABEL3:
		x_39 = x_34
		If x_39 Goto LABEL5
		x_35 = GetAttr self_Main 2
		x_36 = 1
		x_37 = x_35 + x_36
		SetAttr self_Main 2 x_37
		x_38 = GetAttr self_Main 2
		Goto LABEL4
		LABEL5:
		x_40 = GetAttr self_Main 1
		x_41 = GetAttr self_Main 2
		x_42 = GetAttr self_Main 2
		x_43 = x_41 * x_42
		x_44 = x_40 < x_43
		x_55 = x_44
		If x_55 Goto LABEL6
		x_45 = GetAttr self_Main 1
		SetAttr self_Main 0 x_45
		x_46 = GetAttr self_Main 0
		x_49 = GetAttr self_Main 0
		x_48 = x_49
		Param x_48 0
		Param self_Main 1
		x_47 = VCall Main out_int
		x_53 = Load x_52 ->  is prime.

		x_51 = x_53
		Param x_51 0
		Param self_Main 1
		x_50 = VCall Main out_string
		x_55 = x_50
		Goto LABEL7
		LABEL6:
		x_54 = 0
		x_55 = x_54
		LABEL7:
		x_56 = GetAttr self_Main 3
		x_57 = GetAttr self_Main 1
		x_58 = x_56 <= x_57
		x_63 = x_58
		If x_63 Goto LABEL8
		Param self_Main 0
		x_59 = VCall Main abort
		x_63 = x_59
		Goto LABEL9
		LABEL8:
		x_61 = Load x_60 -> continue
		x_62 = Allocate String
		SetAttr x_62 0 x_61
		x_63 = x_62
		LABEL9:
		Goto LABEL10
		LABEL11:
		SetAttr self_Main 4 isvoid
		return = self_Main
	}
	main{
		Local x_66
		Local x_67
		Local x_65
		x_66 = Allocate Main
		Param x_66 0
		x_65 = Call initialize_Main
		Param x_66 0
		x_67 = Call Main_main
		halt
	}
