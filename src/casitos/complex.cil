Types:
	Object{
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
	}
	Int{
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Int:initialize_Int
	}
	Bool{
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Bool:initialize_Bool
	}
	IO{
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
	}
	String{
		method abort:Object_abort
		method type_name:Object_type_name
		method length:String_length
		method concat:String_concat
		method substring:String_substring
		method initialize_String:initialize_String
	}
	Main{
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method main:Main_main
		method initialize_Main:initialize_Main
	}
	Complex{
		attribute x
		attribute y
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method init:Complex_init
		method print:Complex_print
		method reflect_0:Complex_reflect_0
		method reflect_X:Complex_reflect_X
		method reflect_Y:Complex_reflect_Y
		method initialize_Complex:initialize_Complex
	}
Data:
	_vacio="vacio"
	s_object="Object"
	x_18="=)
"
	x_22="=(
"
	x_46="+"
	x_55="I"
Code:
	initialize_Object{
		Arg instance
	}
	initialize_Int{
		Arg instance
	}
	initialize_Bool{
		Arg instance
	}
	initialize_IO{
		Arg instance
	}
	initialize_String{
		Arg instance
	}
	Object_abort{
		Local isvoid
		halt
	}
	Object_type_name{
		Local name
		Local isvoid
		name = Load s_object -> Object
	}
	IO_out_string{
		Arg out_string
		Arg self_IO
		Local isvoid
		Print out_string
	}
	IO_out_int{
		Arg out_int
		Arg self_IO
		Local isvoid
		Print out_int
	}
	IO_in_string{
		Arg self_IO
		Local isvoid
		Local x_in_string
		x_in_string = Read
	}
	IO_in_int{
		Arg self_IO
		Local x_in_int
		Local isvoid
		x_in_int = Read
	}
	String_length{
		Arg x_str
		Local x_str_length
		Local isvoid
		x_str_length = Length x_str
	}
	String_concat{
		Arg x_str2
		Arg x_str1
		Local x_str_concat
		Local isvoid
		x_str_concat = Concat x_str1 x_str2
	}
	String_substring{
		Arg x_string
		Arg x_j
		Arg x_i
		Local x_sub_str
		Local isvoid
		x_sub_str = Substring x_i x_j x_string
	}
	Main_main{
		Arg self_Main
		Local isvoid
		Local x_2
		Local x_0
		Local x_1
		Local x_3
		Local x_4
		Local x_5
		Local x_6
		Local x_7
		Local x__8
		Local x_11
		Local x_9
		Local x_10
		Local x_12
		Local x_13
		Local x_14
		Local x_15
		Local x_16
		Local x_17
		Local x_19
		Local x_20
		Local x_21
		Local x_23
		Local x_24
		x_0 = Allocate Complex
		Param x_0 0
		x_1 = Call initialize_Complex
		x_3 = Typeof x_0
		x_5 = 1
		x_4 = x_5
		x_7 = 1
		x_6 = x_7
		Param x_4 0
		Param x_6 1
		Param x_0 2
		x_2 = VCall x_3 init
		x__8 = x_2
		x_10 = Typeof x__8
		Param x__8 0
		x_9 = VCall x_10 reflect_X
		x_12 = Typeof x_9
		Param x_9 0
		x_11 = VCall x_12 reflect_Y
		x_14 = Typeof x__8
		Param x__8 0
		x_13 = VCall x_14 reflect_0
		x_15 = x_11 == x_13
		x_24 = x_15
		If x_24 Goto LABEL0
		x_19 = Load x_18 -> =)

		x_17 = x_19
		Param x_17 0
		Param self_Main 1
		x_16 = VCall Main out_string
		x_24 = x_16
		Goto LABEL1
		LABEL0:
		x_23 = Load x_22 -> =(

		x_21 = x_23
		Param x_21 0
		Param self_Main 1
		x_20 = VCall Main out_string
		x_24 = x_20
		LABEL1:
	}
	initialize_Main{
		Arg self_Main
		Local isvoid
		Local return
		return = self_Main
	}
	Complex_init{
		Arg x__28
		Arg x__27
		Arg self_Complex
		Local isvoid
		Local x_29
		Local x_30
		Local x_31
		Local x_32
		Local x_33
		x_29 = GetAttr self_Complex 0
		x_30 = x_29 == x__28
		x_31 = GetAttr self_Complex 1
		x_32 = x_31 == x__27
		x_33 = self_Complex
	}
	Complex_print{
		Arg self_Complex
		Local isvoid
		Local x_34
		Local x_35
		Local x_36
		Local x_37
		Local x_38
		Local x_39
		Local x_52
		Local x_48
		Local x_43
		Local x_40
		Local x_41
		Local x_42
		Local x_44
		Local x_45
		Local x_47
		Local x_49
		Local x_50
		Local x_51
		Local x_53
		Local x_54
		Local x_56
		Local x_57
		x_34 = GetAttr self_Complex 1
		x_35 = 0
		x_36 = x_34 == x_35
		x_57 = x_36
		If x_57 Goto LABEL2
		x_39 = GetAttr self_Complex 0
		x_38 = x_39
		Param x_38 0
		Param self_Complex 1
		x_37 = VCall Complex out_int
		x_57 = x_37
		Goto LABEL3
		LABEL2:
		x_42 = GetAttr self_Complex 0
		x_41 = x_42
		Param x_41 0
		Param self_Complex 1
		x_40 = VCall Complex out_int
		x_44 = Typeof x_40
		x_47 = Load x_46 -> +
		x_45 = x_47
		Param x_45 0
		Param x_40 1
		x_43 = VCall x_44 out_string
		x_49 = Typeof x_43
		x_51 = GetAttr self_Complex 1
		x_50 = x_51
		Param x_50 0
		Param x_43 1
		x_48 = VCall x_49 out_int
		x_53 = Typeof x_48
		x_56 = Load x_55 -> I
		x_54 = x_56
		Param x_54 0
		Param x_48 1
		x_52 = VCall x_53 out_string
		x_57 = x_52
		LABEL3:
	}
	Complex_reflect_0{
		Arg self_Complex
		Local isvoid
		Local x_58
		Local x_59
		Local x_61
		Local x_60
		Local x_62
		Local x_63
		Local x_64
		Local x_66
		Local x_65
		Local x_67
		Local x_68
		x_58 = GetAttr self_Complex 0
		x_59 = GetAttr self_Complex 0
		x_61 = 0
		x_60 = x_61 - x_59
		x_62 = x_58 == x_60
		x_63 = GetAttr self_Complex 1
		x_64 = GetAttr self_Complex 1
		x_66 = 0
		x_65 = x_66 - x_64
		x_67 = x_63 == x_65
		x_68 = self_Complex
	}
	Complex_reflect_X{
		Arg self_Complex
		Local isvoid
		Local x_69
		Local x_70
		Local x_72
		Local x_71
		Local x_73
		Local x_74
		x_69 = GetAttr self_Complex 1
		x_70 = GetAttr self_Complex 1
		x_72 = 0
		x_71 = x_72 - x_70
		x_73 = x_69 == x_71
		x_74 = self_Complex
	}
	Complex_reflect_Y{
		Arg self_Complex
		Local isvoid
		Local x_75
		Local x_76
		Local x_78
		Local x_77
		Local x_79
		Local x_80
		x_75 = GetAttr self_Complex 0
		x_76 = GetAttr self_Complex 0
		x_78 = 0
		x_77 = x_78 - x_76
		x_79 = x_75 == x_77
		x_80 = self_Complex
	}
	initialize_Complex{
		Arg self_Complex
		Local isvoid
		Local x_25
		Local x_26
		Local return
		SetAttr self_Complex 0 x_25
		SetAttr self_Complex 1 x_26
		return = self_Complex
	}
	main{
		Local x_82
		Local x_83
		Local x_81
		x_82 = Allocate Main
		Param x_82 0
		x_81 = Call initialize_Main
		Param x_82 0
		x_83 = Call Main_main
		halt
	}
