Types:
	Object{
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
	}
	Int{
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Int:initialize_Int
	}
	Bool{
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Bool:initialize_Bool
	}
	IO{
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
	}
	String{
		method abort:Object_abort
		method type_name:Object_type_name
		method length:String_length
		method concat:String_concat
		method substring:String_substring
		method initialize_String:initialize_String
	}
	A{
		attribute io
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
		method out_a:A_out_a
		method initialize_A:initialize_A
	}
	B{
		attribute io
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
		method out_a:A_out_a
		method initialize_A:initialize_A
		method out_b:B_out_b
		method initialize_B:initialize_B
	}
	C{
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method out_c:C_out_c
		method initialize_C:initialize_C
	}
	D{
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method out_c:C_out_c
		method initialize_C:initialize_C
		method out_d:D_out_d
		method initialize_D:initialize_D
	}
	Main{
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method main:Main_main
		method initialize_Main:initialize_Main
	}
Data:
	_vacio="vacio"
	s_object="Object"
	x_6="A: Hello world
"
	x_12="B: Hello world
"
	x_17="C: Hello world
"
	x_21="D: Hello world
"
	x_41="Done.
"
Code:
	initialize_Object{
		Arg instance
	}
	initialize_Int{
		Arg instance
	}
	initialize_Bool{
		Arg instance
	}
	initialize_IO{
		Arg instance
	}
	initialize_String{
		Arg instance
	}
	Object_abort{
		Local isvoid
		halt
	}
	Object_type_name{
		Local name
		Local isvoid
		name = Load s_object -> Object
	}
	IO_out_string{
		Arg out_string
		Arg self_IO
		Local isvoid
		Print out_string
	}
	IO_out_int{
		Arg out_int
		Arg self_IO
		Local isvoid
		Print out_int
	}
	IO_in_string{
		Arg self_IO
		Local isvoid
		Local x_in_string
		x_in_string = Read
	}
	IO_in_int{
		Arg self_IO
		Local x_in_int
		Local isvoid
		x_in_int = Read
	}
	String_length{
		Arg x_str
		Local x_str_length
		Local isvoid
		x_str_length = Length x_str
	}
	String_concat{
		Arg x_str2
		Arg x_str1
		Local x_str_concat
		Local isvoid
		x_str_concat = Concat x_str1 x_str2
	}
	String_substring{
		Arg x_string
		Arg x_j
		Arg x_i
		Local x_sub_str
		Local isvoid
		x_sub_str = Substring x_i x_j x_string
	}
	A_out_a{
		Arg self_A
		Local isvoid
		Local x_3
		Local x_2
		Local x_4
		Local x_5
		Local x_7
		x_2 = GetAttr self_A 0
		x_4 = Typeof x_2
		x_7 = Load x_6 -> A: Hello world

		x_5 = x_7
		Param x_5 0
		Param x_2 1
		x_3 = VCall x_4 out_string
	}
	initialize_A{
		Arg self_A
		Local isvoid
		Local x_0
		Local x_1
		Local return
		x_0 = Allocate IO
		Param x_0 0
		x_1 = Call initialize_IO
		SetAttr self_A 0 x_0
		return = self_A
	}
	B_out_b{
		Arg self_B
		Local isvoid
		Local x_9
		Local x_8
		Local x_10
		Local x_11
		Local x_13
		x_8 = GetAttr self_B 0
		x_10 = Typeof x_8
		x_13 = Load x_12 -> B: Hello world

		x_11 = x_13
		Param x_11 0
		Param x_8 1
		x_9 = VCall x_10 out_string
	}
	initialize_B{
		Arg self_B
		Local isvoid
		Local return
		Local x_14
		Param self_B 0
		x_14 = Call initialize_A
		return = self_B
	}
	C_out_c{
		Arg self_C
		Local isvoid
		Local x_15
		Local x_16
		Local x_18
		x_18 = Load x_17 -> C: Hello world

		x_16 = x_18
		Param x_16 0
		Param self_C 1
		x_15 = VCall C out_string
	}
	initialize_C{
		Arg self_C
		Local isvoid
		Local return
		return = self_C
	}
	D_out_d{
		Arg self_D
		Local isvoid
		Local x_19
		Local x_20
		Local x_22
		x_22 = Load x_21 -> D: Hello world

		x_20 = x_22
		Param x_20 0
		Param self_D 1
		x_19 = VCall D out_string
	}
	initialize_D{
		Arg self_D
		Local isvoid
		Local return
		return = self_D
	}
	Main_main{
		Arg self_Main
		Local isvoid
		Local x_25
		Local x_23
		Local x_24
		Local x_26
		Local x_29
		Local x_27
		Local x_28
		Local x_30
		Local x_33
		Local x_31
		Local x_32
		Local x_34
		Local x_37
		Local x_35
		Local x_36
		Local x_38
		Local x_39
		Local x_40
		Local x_42
		x_23 = Allocate A
		Param x_23 0
		x_24 = Call initialize_A
		x_26 = Typeof x_23
		Param x_23 0
		x_25 = VCall x_26 out_a
		x_27 = Allocate B
		Param x_27 0
		x_28 = Call initialize_B
		x_30 = Typeof x_27
		Param x_27 0
		x_29 = VCall x_30 out_b
		x_31 = Allocate C
		Param x_31 0
		x_32 = Call initialize_C
		x_34 = Typeof x_31
		Param x_31 0
		x_33 = VCall x_34 out_c
		x_35 = Allocate D
		Param x_35 0
		x_36 = Call initialize_D
		x_38 = Typeof x_35
		Param x_35 0
		x_37 = VCall x_38 out_d
		x_42 = Load x_41 -> Done.

		x_40 = x_42
		Param x_40 0
		Param self_Main 1
		x_39 = VCall Main out_string
	}
	initialize_Main{
		Arg self_Main
		Local isvoid
		Local return
		return = self_Main
	}
	main{
		Local x_44
		Local x_45
		Local x_43
		x_44 = Allocate Main
		Param x_44 0
		x_43 = Call initialize_Main
		Param x_44 0
		x_45 = Call Main_main
		halt
	}
