Types:
	Object{
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Object:initialize_Object
	}
	Int{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Int:initialize_Int
	}
	Bool{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method initialize_Bool:initialize_Bool
	}
	IO{
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
	}
	String{
		attribute value
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method length:String_length
		method concat:String_concat
		method substr:String_substring
		method initialize_String:initialize_String
	}
	Main{
		attribute y
		attribute tmp
		method copy:Object_copy
		method abort:Object_abort
		method type_name:Object_type_name
		method out_string:IO_out_string
		method out_int:IO_out_int
		method in_string:IO_in_string
		method in_int:IO_in_int
		method initialize_IO:initialize_IO
		method add:Main_add
		method main:Main_main
		method initialize_Main:initialize_Main
	}
Data:
	_vacio=""
	x_1="Hola"
Code:
	initialize_Object{
		Arg instance
	}
	initialize_Int{
		Arg instance
	}
	initialize_Bool{
		Arg instance
	}
	initialize_IO{
		Arg instance
	}
	initialize_String{
		Arg instance
	}
	Object_copy{
		Arg to_copy
		Local isvoid
		Local save_copy
		save_copy = Copy to_copy
	}
	Object_abort{
		Arg self_Object
		Local isvoid
		halt
	}
	Object_type_name{
		Arg self_Object
		Local name
		Local type_name_ref
		Local isvoid
		name = Typeof self_Object
		type_name_ref = Type_Name name
	}
	IO_out_string{
		Arg out_string
		Arg self_IO
		Local isvoid
		Print out_string
		out_string = self_IO
	}
	IO_out_int{
		Arg out_int
		Arg self_IO
		Local isvoid
		Print out_int
		out_int = self_IO
	}
	IO_in_string{
		Arg self_IO
		Local isvoid
		Local x_in_string
		x_in_string = Read
	}
	IO_in_int{
		Arg self_IO
		Local x_in_int
		Local isvoid
		x_in_int = Read
	}
	String_length{
		Arg x_str
		Local x_str_length
		Local isvoid
		x_str_length = Length x_str
	}
	String_concat{
		Arg self_String
		Arg x_str1
		Local x_str_concat
		Local isvoid
		x_str_concat = Concat x_str1 self_String
	}
	String_substring{
		Arg self_String
		Arg x_j
		Arg x_i
		Local x_sub_str
		Local isvoid
		x_sub_str = Substring self_String x_j x_i
	}
	Main_add{
		Arg x__5
		Arg x__4
		Arg x__3
		Arg self_Main
		Local isvoid
		Local x_6
		Local x_7
		x_6 = x__5 + x__4
		x_7 = x_6 + x__3
	}
	Main_main{
		Arg self_Main
		Local isvoid
		Local x_8
		Local x_9
		Local x_10
		Local x_11
		Local x_12
		Local x_13
		Local x_14
		Local x_15
		Local x_16
		Local x_17
		Local x_18
		Local x_19
		Local x_20
		Local x_21
		Local x_22
		x_12 = 4
		x_11 = x_12
		x_14 = 3
		x_13 = x_14
		x_16 = 4
		x_15 = x_16
		Param x_11 0
		Param x_13 1
		Param x_15 2
		Param self_Main 3
		x_10 = VCall Main add
		x_9 = x_10
		Param x_9 0
		Param self_Main 1
		x_8 = VCall Main out_int
		x_19 = GetAttr self_Main 0
		x_18 = x_19
		Param x_18 0
		Param self_Main 1
		x_17 = VCall Main out_int
		x_22 = GetAttr self_Main 1
		x_21 = x_22
		Param x_21 0
		Param self_Main 1
		x_20 = VCall Main out_string
	}
	initialize_Main{
		Arg self_Main
		Local isvoid
		Local x_0
		Local x_2
		Local return
		x_0 = 3
		SetAttr self_Main 0 x_0
		x_2 = Load x_1 -> Hola
		SetAttr self_Main 1 x_2
		return = self_Main
	}
	main{
		Local x_24
		Local x_25
		Local x_23
		x_24 = Allocate Main
		Param x_24 0
		x_23 = Call initialize_Main
		Param x_24 0
		x_25 = Call Main_main
		halt
	}
